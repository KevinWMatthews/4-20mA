TimeService_Create() initializes all periodic alarms to unused
(It would allocate dynamic memory if we decide to do so)

Destroy()sets all alarms to unused
(It would free dynamically allocated memory if need be)

AddPeridicAlarm() marks the next alarm as used and returns a pointer to this alarm.

SetPeriodicAlarm() allows the user to set the callback function and the interval at which it will be called

GetCallbackFunction() and GetCallbackInterval() are used to query the alarm for its details.



Alternate idea:
Set Timer1 Compare Interrupt to 1 ms

Increment a series of counters.
If a counter has reached its interval,
  set global flag
  reset counter.
  (Main program will service/clear flag)

Create a callback struct that contains the function pointer, a time interval, a counter, and a global "execute now" flag.

Main:
  If flag is set,
    clear flag
    execute callback function


For testing this method, we'll need a fake HW timer interrupt. Maybe we just need a fake flag counter? Or just a fake flag?


    Clock frequencies:
Can we set up a timer to increment at 1ms? Yes!!

Clock0 has a prescaler up to 1024.
System clock can be set to 1, 2, 4, or 8 mHz in its default mode.

1mHz / 4 = 250000
If we set our 8-bit counter to match at 250, we will have
250000 Hz / 250 = 1000 Hz interrupts, or 1 interrupt per ms.
:)

8 mHz / 64 = 125000
If we set our 8-bit counter to match at 125, we'll get interrupts at 1 Hz.

We have options!
